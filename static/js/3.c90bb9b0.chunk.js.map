{"version":3,"sources":["panes/profile/preferences/trustedApplications/view.tsx","panes/profile/preferences/trustedApplications/container.tsx","components/ProfileCard.tsx","panes/profile/preferences/preferences.tsx","panes/profile/container.tsx"],"names":["View","props","react","className","apps","map","app","view_ApplicationRow","key","origin","onSave","onSaveApp","onDelete","onDeleteApp","view_NewApplication","ApplicationRow","initialModes","Read","modes","indexOf","Append","Write","Control","_React$useState","React","_React$useState2","Object","slicedToArray","setModes","getCheckboxHandler","mode","event","checked","objectSpread","defineProperty","setMode","target","onSubmit","preventDefault","newModes","keys","filter","type","onChange","name","id","onClick","NewApplication","_React$useState3","_React$useState4","setOrigin","_React$useState5","_React$useState6","e","value","placeholder","TrustedApplications","fetchedTrustedApps","fetchTrustedApps","store","profile","useState","trustedApps","setTrustedApps","updater","editable","doc","uri","react_default","a","createElement","view_View","Promise","resolve","deletions","getStatementsToDelete","$rdf","sym","additions","getStatementsToAdd","Math","random","toString","substring","update","newApp","subject","into","index","findIndex","found","concat","slice","insertTrustedApp","from","removeTrustedApp","ProfileCard","profileStatements","reduce","soFar","statement","predicate","ns","foaf","object","vcard","photo","organization","role","src","alt","Preferences","webId","useWebId","container","Container","view","setView","getMenuHandler","forView","container_MainItem","assign","lib","href","MainItem","preferences_Preferences","resource","statementsMatching","ProfileCard_ProfileCard"],"mappings":"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","file":"static/js/3.c90bb9b0.chunk.js","sourcesContent":["import * as React from 'react'\nimport { NamedNode } from 'rdflib'\nimport { TrustedApplication, Mode } from './model'\n\ntype AddOrUpdate = (origin: string, modes: Mode[]) => Promise<void>\ninterface Props {\n  apps: Array<Exclude<TrustedApplication, { subject: NamedNode}>>;\n  onSaveApp: AddOrUpdate;\n  onDeleteApp: (origin: string) => Promise<void>;\n}\n\nexport const View: React.FC<Props> = (props) => {\n  return (\n    <>\n      <h2 className=\"title\">Applications</h2>\n      <p className=\"content\">Manage which applications can access data on your Pod.</p>\n      <p className=\"content\">Note: applications will never have more access than you have.</p>\n      <table className=\"table is-fullwidth is-bordered is-striped\">\n        <thead>\n          <tr>\n            <th>Application URL</th>\n            <th>Access level</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.apps.map((app) => (\n            <ApplicationRow\n              key={app.origin}\n              app={app}\n              onSave={props.onSaveApp}\n              onDelete={props.onDeleteApp}\n            />\n          ))}\n        </tbody>\n      </table>\n      <NewApplication onSave={props.onSaveApp}/>\n    </>\n  )\n}\n\nconst ApplicationRow: React.FC<{\n  app: TrustedApplication,\n  onSave: AddOrUpdate,\n  onDelete: (origin: string) => Promise<void>\n}> = (props) => {\n  const initialModes = {\n    Read: props.app.modes.indexOf('Read') !== -1,\n    Append: props.app.modes.indexOf('Append') !== -1,\n    Write: props.app.modes.indexOf('Write') !== -1,\n    Control: props.app.modes.indexOf('Control') !== -1\n  }\n  const [modes, setModes] = React.useState<{[ key: string]: boolean}>(initialModes)\n\n  const setMode = (mode: Mode, checked: boolean) => {\n    setModes({ ...modes, [mode]: checked })\n  }\n  const getCheckboxHandler = (mode: Mode) => {\n    return (event: React.ChangeEvent<HTMLInputElement>) => setMode(mode, event.target.checked)\n  }\n\n  const submitHandler = (event: React.FormEvent) => {\n    event.preventDefault()\n\n    const newModes = Object.keys(modes).filter(mode => modes[mode]) as Mode[]\n    props.onSave(props.app.origin, newModes)\n  }\n\n  return (\n    <tr>\n      <td>\n        <p>{props.app.origin}</p>\n      </td>\n      <td>\n        <form onSubmit={submitHandler}>\n          <div className=\"field is-grouped\">\n            <div className=\"control\">\n              <label className=\"checkbox\">\n                <input\n                  type=\"checkbox\"\n                  onChange={getCheckboxHandler('Read')}\n                  checked={modes.Read}\n                  name=\"Read\"\n                  id=\"Read\"\n                />\n                Read\n              </label>\n            </div>\n            <div className=\"control\">\n              <label className=\"checkbox\">\n                <input\n                  type=\"checkbox\"\n                  onChange={getCheckboxHandler('Append')}\n                  checked={modes.Append}\n                  name=\"Append\"\n                  id=\"Append\"\n                />\n                Append\n              </label>\n            </div>\n            <div className=\"control\">\n              <label className=\"checkbox\">\n                <input\n                  type=\"checkbox\"\n                  onChange={getCheckboxHandler('Write')}\n                  checked={modes.Write}\n                  name=\"Write\"\n                  id=\"Write\"\n                />\n                Write\n              </label>\n            </div>\n            <div className=\"control\">\n              <label className=\"checkbox\">\n                <input\n                  type=\"checkbox\"\n                  onChange={getCheckboxHandler('Control')}\n                  checked={modes.Control}\n                  name=\"Control\"\n                  id=\"Control\"\n                />\n                Control\n              </label>\n            </div>\n          </div>\n          <div className=\"field\">\n            <div className=\"control\">\n              <button type=\"submit\" className=\"button is-small\">Save</button>\n            </div>\n          </div>\n        </form>\n      </td>\n      <td className=\"has-text-right is-narrow\">\n        <button\n          onClick={() => props.onDelete(props.app.origin)}\n          className=\"button is-danger is-small\"\n        >Delete</button>\n      </td>\n    </tr>\n  )\n}\n\nconst NewApplication: React.FC<{ onSave: AddOrUpdate }> = (props) => {\n  const [origin, setOrigin] = React.useState()\n  const [modes, setModes] = React.useState<{[ key: string]: boolean}>({\n    Read: false,\n    Append: false,\n    Write: false,\n    Control: false\n  })\n\n  const setMode = (mode: Mode, checked: boolean) => {\n    setModes({ ...modes, [mode]: checked })\n  }\n  const getCheckboxHandler = (mode: Mode) => {\n    return (event: React.ChangeEvent<HTMLInputElement>) => setMode(mode, event.target.checked)\n  }\n\n  const submitHandler = (event: React.FormEvent) => {\n    event.preventDefault()\n\n    const newModes = Object.keys(modes).filter(mode => modes[mode]) as Mode[]\n    props.onSave(origin, newModes)\n  }\n\n  return (\n    <form onSubmit={submitHandler} className=\"footer\">\n      <div className=\"field\">\n        <label className=\"label\">App URL:</label>\n        <input\n          type=\"url\"\n          onChange={(e) => setOrigin(e.target.value)}\n          name=\"origin\"\n          id=\"origin\"\n          placeholder=\"https://example.com\"\n          className=\"input\"\n        />\n      </div>\n      <div className=\"field\">\n        <div className=\"control\">\n          <label className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              onChange={getCheckboxHandler('Read')}\n              name=\"Read\"\n              id=\"Read\"\n            />\n            Read\n          </label>\n          <label className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              onChange={getCheckboxHandler('Append')}\n              name=\"Append\"\n              id=\"Append\"\n            />\n            Append\n          </label>\n          <label className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              onChange={getCheckboxHandler('Write')}\n              name=\"Write\"\n              id=\"Write\"\n            />\n            Write\n          </label>\n          <label className=\"checkbox\">\n            <input\n              type=\"checkbox\"\n              onChange={getCheckboxHandler('Control')}\n              name=\"Control\"\n              id=\"Control\"\n            />\n            Control\n          </label>\n        </div>\n      </div>\n      <div className=\"field\">\n        <div className=\"control\">\n          <button type=\"submit\" className=\"button is-primary\">Give access</button>\n        </div>\n      </div>\n    </form>\n  )\n}","import React from 'react';\nimport $rdf, { NamedNode, IndexedFormula, UpdateManager } from 'rdflib';\nimport { TrustedApplication, Mode } from './model';\nimport { fetchTrustedApps, getStatementsToAdd, getStatementsToDelete } from './service';\nimport { View } from './view';\n\ninterface Props {\n  profile: NamedNode;\n  store: IndexedFormula;\n  updater: UpdateManager;\n};\n\nexport const TrustedApplications: React.FC<Props> = (props) => {\n  const fetchedTrustedApps: TrustedApplication[] = fetchTrustedApps(props.store, props.profile);\n\n  const [trustedApps, setTrustedApps] = React.useState(fetchedTrustedApps);\n\n  const isEditable: boolean = (props.updater as any).editable(props.profile.doc().uri, props.store);\n  if (!isEditable) {\n    return <div>Your profile {props.profile.doc().uri} is not editable, so we cannot do much here.</div>;\n  }\n\n  const addOrEditApp = (origin: string, modes: Mode[]) => {\n    const result = new Promise<void>((resolve) => {\n      const deletions = getStatementsToDelete($rdf.sym(origin), props.profile, props.store);\n      const additions = getStatementsToAdd($rdf.sym(origin), generateRandomString(), modes, props.profile);\n      props.store.updater!.update(deletions, additions, () => {\n        const newApp: TrustedApplication = { subject: props.profile.value, origin, modes };\n        setTrustedApps(insertTrustedApp(newApp, trustedApps));\n        resolve();\n      })\n    })\n\n    return result;\n  }\n\n  const deleteApp = (origin: string) => {\n    const result = new Promise<void>((resolve) => {\n      const deletions = getStatementsToDelete($rdf.sym(origin), props.profile, props.store);\n      props.store.updater!.update(deletions, [], () => {\n        setTrustedApps(removeTrustedApp(origin, trustedApps));\n        resolve();\n      })\n    })\n\n    return result;\n  }\n\n  return (\n    <section>\n      <View\n        apps={trustedApps}\n        onSaveApp={addOrEditApp}\n        onDeleteApp={deleteApp}\n      />\n    </section>\n  )\n}\n\nfunction insertTrustedApp (app: TrustedApplication, into: TrustedApplication[]): TrustedApplication[] {\n  const index = into.findIndex(found => found.origin === app.origin)\n  if (index === -1) {\n    return into.concat(app)\n  }\n\n  return into.slice(0, index)\n    .concat(app)\n    .concat(into.slice(index + 1))\n}\nfunction removeTrustedApp (origin: string, from: TrustedApplication[]): TrustedApplication[] {\n  const index = from.findIndex(found => found.origin === origin)\n  return (index === -1)\n    ? from\n    : from.slice(0, index).concat(from.slice(index + 1))\n}\n\nfunction generateRandomString (): string {\n  return Math.random().toString(36).substring(7)\n}\n","import React from 'react';\nimport { Statement } from 'rdflib';\nimport { namespaces as ns } from '../namespace';\n\ninterface Props {\n  profileStatements: Statement[];\n};\n\nexport const ProfileCard: React.FC<Props> = (props) => {\n  const profile = getProfile(props.profileStatements);\n  const photo = profile.photo ? <img src={profile.photo} className=\"image is-128x128\" alt={profile.name || ''}/> : null;\n\n  return (\n    <div className=\"card\">\n      <div className=\"section\">\n        <h2 className=\"title\">{profile.name || 'Anonymous'}</h2>\n        <p className=\"content\">\n          {photo}\n        </p>\n        <p className=\"content\">\n          {profile.role} {(profile.role && profile.organization) ? ' at ' : null} {profile.organization}\n        </p>\n      </div>\n    </div>\n  );\n};\n\ninterface ProfileFields {\n  name: string;\n  photo: string;\n  organization: string;\n  role: string;\n};\nfunction getProfile(statements: Statement[]): Partial<ProfileFields> {\n  const profile = statements.reduce(\n    (soFar, statement) => {\n      if (statement.predicate.value === ns.foaf('name').value) {\n        soFar.name = statement.object.value;\n      } else if (statement.predicate.value === ns.vcard('hasPhoto').value) {\n        soFar.photo = statement.object.value;\n      } else if (statement.predicate.value === ns.vcard('organization-name').value) {\n        soFar.organization = statement.object.value;\n      } else if (statement.predicate.value === ns.vcard('role').value) {\n        soFar.role = statement.object.value;\n      }\n\n      return soFar;\n    },\n    {} as Partial<ProfileFields>,\n  );\n\n  return profile;\n}\n","import React from 'react';\nimport { IndexedFormula, NamedNode, UpdateManager } from 'rdflib';\nimport { useWebId } from '@solid/react';\nimport { TrustedApplications } from './trustedApplications/container';\n\ninterface Props {\n  store: IndexedFormula;\n  updater: UpdateManager;\n  profile: NamedNode;\n};\n\nexport const Preferences: React.FC<Props> = (props) => {\n  const webId = useWebId();\n\n  if (!webId || webId !== props.profile.value) {\n    return (\n      <p>You can only set your own preferences.</p>\n    );\n  }\n\n  return (\n    <section className=\"section\">\n      <TrustedApplications\n        store={props.store}\n        updater={props.updater}\n        profile={props.profile}\n      />\n    </section>\n  );\n};\n","import React from 'react';\nimport { useWebId, LoggedIn } from '@solid/react';\nimport { PaneContainer, PaneContainerProps } from '../../components/PaneLoader';\nimport { ProfileCard } from '../../components/ProfileCard';\nimport { Preferences } from './preferences/preferences';\n\ntype Views = 'view' | 'preferences';\nexport const Container: PaneContainer = (props) => {\n  const [view, setView] = React.useState<Views>('view');\n\n  function getMenuHandler(forView: Views) {\n    return (event: React.MouseEvent<HTMLAnchorElement>) => {\n      event.preventDefault();\n\n      setView(forView);\n    };\n  }\n  return (\n    <div className=\"columns\">\n      <div className=\"column\">\n        <section className=\"section\">\n          <MainItem {...props} view={view}/>\n        </section>\n      </div>\n      <LoggedIn>\n        <aside className=\"column is-one-quarter\">\n          <div className=\"section\">\n            <div className=\"menu\">\n              <ul className=\"menu-list\">\n                <li>\n                  <a\n                    // TODO: When we have a router, add an actual route to link to\n                    href=\"#profile\"\n                    onClick={getMenuHandler('view')}\n                  >Profile</a>\n                </li>\n                <li>\n                  <a\n                    // TODO: When we have a router, add an actual route to link to\n                    href=\"#trustedApps\"\n                    onClick={getMenuHandler('preferences')}\n                  >Applications</a>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </aside>\n      </LoggedIn>\n    </div>\n  );\n};\n\nconst MainItem: React.FC<PaneContainerProps & { view: Views }> = (props) => {\n  if (props.view === 'preferences') {\n    return (\n      <Preferences\n        store={props.store}\n        updater={props.updater}\n        profile={props.resource}\n      />\n    );\n  }\n\n  const profileStatements = props.store.statementsMatching(props.resource, null, null, props.resource.doc());\n\n  return (\n    <ProfileCard profileStatements={profileStatements}/>\n  );\n}\n"],"sourceRoot":""}