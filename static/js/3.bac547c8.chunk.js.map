{"version":3,"sources":["panes/fallback/Turtle.tsx","panes/fallback/Resources.tsx","components/styleguide/Toggle.tsx","panes/fallback/container.tsx"],"names":["Turtle","props","_React$useState","React","useState","_React$useState2","Object","slicedToArray","serialised","setSerialised","useEffect","$rdf","serialize","resource","doc","store","undefined","err","result","react_default","a","createElement","className","value","name","id","cols","rows","readOnly","Resources","statementsBySubject","statementsMatching","reduce","soFar","statement","subject","push","values","map","subjectStatements","subjectStatement","index","key","toString","ResourceLink","predicate","object","Toggle","inputProps","objectSpread","label","encodeURIComponent","assign","aria-label","type","htmlFor","Container","tableView","setTableView","Resources_Resources","Turtle_Turtle","Toggle_Toggle","onChange","defaultChecked"],"mappings":"+IAQaA,EAA0B,SAACC,GAAU,IAAAC,EACZC,IAAMC,SAAiB,iBADXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACzCM,EADyCH,EAAA,GAC7BI,EAD6BJ,EAAA,GAahD,OAVAF,IAAMO,UAAU,WACbC,IAAaC,UAAUX,EAAMY,SAASC,MAAOb,EAAMc,WAAOC,EAAW,cAAe,SAACC,EAAYC,GAI9FT,EAHGQ,EAGW,kEAFAC,OAQlBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,YACEE,MAAOf,EACPgB,KAAK,cACLC,GAAG,cACHH,UAAU,WACVI,KAAM,GACNC,KAAM,GACNC,UAAQ,eCrBHC,EAA6B,SAAC5B,GACzC,IACM6B,EADa7B,EAAMc,MAAMgB,mBAAmB,KAAM,KAAM,KAAM9B,EAAMY,SAASC,OAAO,GACnDkB,OACrC,SAACC,EAAOC,GACN,IAAMC,EAAUD,EAAUC,QAAQZ,MAGlC,OAFAU,EAAME,GAAWF,EAAME,IAAY,GACnCF,EAAME,GAASC,KAAKF,GACbD,GAET,IAGIN,EAAOrB,OAAO+B,OAAOP,GAAqBQ,IAAI,SAACC,GACnD,OAAOA,EAAkBD,IAAI,SAACE,EAAkBC,GAC9C,OACEtB,EAAAC,EAAAC,cAAA,MAAIqB,IAAKF,EAAiBL,QAAUM,EAAME,YACxCxB,EAAAC,EAAAC,cAAA,UACc,IAAVoB,EACEtB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAc/B,SAAU2B,EAAiBL,UACzC,MAGNhB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAc/B,SAAU2B,EAAiBK,aAE3C1B,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAc/B,SAAU2B,EAAiBM,eAOnD,OACE3B,EAAAC,EAAAC,cAAA,SAAOC,UAAU,6CAA4CH,EAAAC,EAAAC,cAAA,aAAQM,cChC5DoB,EAA0B,SAAC9C,GACtC,IAAM+C,EAAU1C,OAAA2C,EAAA,EAAA3C,CAAA,GACXL,EADW,CAEdiD,WAAOlC,IAEHS,EAAK0B,mBAAmBlD,EAAMiD,OAEpC,OACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,QAAAf,OAAA8C,OAAA,GAAWJ,EAAX,CAAuBvB,GAAIA,EAAI4B,aAAYpD,EAAMiD,MAAOI,KAAK,WAAWhC,UAAU,YAClFH,EAAAC,EAAAC,cAAA,SAAOkC,QAAS9B,GAAKxB,EAAMiD,iDCf1B,IAAMM,EAA2B,SAACvD,GAAU,IAAAC,EACfC,IAAMC,UAAS,GADAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAC1CuD,EAD0CpD,EAAA,GAC/BqD,EAD+BrD,EAAA,GAOjD,OACEc,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAb,6EACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,WAAb,uCACCmC,EACGtC,EAAAC,EAAAC,cAACsC,EAAD,CAAW9C,SAAUZ,EAAMY,SAAUE,MAAOd,EAAMc,QAClDI,EAAAC,EAAAC,cAACuC,EAAD,CAAQ/C,SAAUZ,EAAMY,SAAUE,MAAOd,EAAMc,QAEnDI,EAAAC,EAAAC,cAACwC,EAAD,CAAQC,SAZO,WACjBJ,GAAcD,IAWkBP,MAAM,aAAaa,eAAgBN","file":"static/js/3.bac547c8.chunk.js","sourcesContent":["import React from 'react';\nimport $rdf, { IndexedFormula, NamedNode } from 'rdflib';\n\ninterface Props {\n  resource: NamedNode;\n  store: IndexedFormula;\n};\n\nexport const Turtle: React.FC<Props> = (props) => {\n  const [serialised, setSerialised] = React.useState<string>('Loadingâ€¦');\n\n  React.useEffect(() => {\n    ($rdf as any).serialize(props.resource.doc(), props.store, undefined, 'text/turtle', (err: Error, result: string) => {\n      if (!err) {\n        setSerialised(result);\n      } else {\n        setSerialised('Error loading the raw document, please try refreshing the page.');\n      }\n    });\n  });\n\n  return (\n    <div className=\"field\">\n      <textarea\n        value={serialised}\n        name=\"rawDocument\"\n        id=\"rawDocument\"\n        className=\"textarea\"\n        cols={30}\n        rows={10}\n        readOnly\n      />\n    </div>\n  );\n};\n","import React from 'react';\nimport { IndexedFormula, NamedNode, Statement } from 'rdflib';\nimport { ResourceLink } from '../../components/ResourceLink';\n\ninterface Props {\n  resource: NamedNode;\n  store: IndexedFormula;\n};\n\nexport const Resources: React.FC<Props> = (props) => {\n  const statements = props.store.statementsMatching(null, null, null, props.resource.doc(), false);\n  const statementsBySubject = statements.reduce(\n    (soFar, statement) => {\n      const subject = statement.subject.value;\n      soFar[subject] = soFar[subject] || [];\n      soFar[subject].push(statement);\n      return soFar;\n    },\n    {} as {[subject: string]: Statement[]},\n  );\n\n  const rows = Object.values(statementsBySubject).map((subjectStatements) => {\n    return subjectStatements.map((subjectStatement, index) => {\n      return (\n        <tr key={subjectStatement.subject + index.toString()}>\n          <td>\n            {(index === 0)\n              ? <ResourceLink resource={subjectStatement.subject as NamedNode}/>\n              : null\n            }\n          </td>\n          <td>\n            <ResourceLink resource={subjectStatement.predicate as NamedNode}/>\n          </td>\n          <td>\n            <ResourceLink resource={subjectStatement.object as NamedNode}/>\n          </td>\n        </tr>\n      );\n    });\n  });\n\n  return (\n    <table className=\"table is-fullwidth is-bordered is-striped\"><tbody>{rows}</tbody></table>\n  );\n};\n","import React from 'react';\n\ninterface OwnProps {\n  label: string;\n};\n\ntype Props = Omit<React.HTMLAttributes<HTMLInputElement>, keyof OwnProps> & OwnProps;\n\n/**\n * @param props Attributes that are valid for `<input type=\"checkbox\">` are valid here too. Additionally, a `label` prop is required. This is currently only provided to screen readers, but will likely be shown in the interface later.\n */\nexport const Toggle: React.FC<Props> = (props) => {\n  const inputProps = {\n    ...props,\n    label: undefined,\n  };\n  const id = encodeURIComponent(props.label);\n\n  return (\n    <div className=\"field\">\n      <input {...inputProps} id={id} aria-label={props.label} type=\"checkbox\" className=\"switch\"/>\n      <label htmlFor={id}>{props.label}</label>\n    </div>\n  );\n}\n","import React from 'react';\nimport { PaneContainer } from '../../components/PaneLoader';\nimport { Turtle } from './Turtle';\nimport { Resources } from './Resources';\nimport { Toggle } from '../../components/styleguide/Toggle';\n\nexport const Container: PaneContainer = (props) => {\n  const [tableView, setTableView] = React.useState(true);\n\n  const toggleView = () => {\n    setTableView(!tableView);\n  }\n\n  return (\n    <section className=\"section\">\n      <p className=\"content\">Unfortunately we do not yet have a Pane to display this type of resource.</p>\n      <p className=\"content\">You can see the raw document below:</p>\n      {tableView\n        ? <Resources resource={props.resource} store={props.store}/>\n        : <Turtle resource={props.resource} store={props.store}/>\n      }\n      <Toggle onChange={toggleView} label=\"Table view\" defaultChecked={tableView}/>\n    </section>\n  );\n};\n"],"sourceRoot":""}