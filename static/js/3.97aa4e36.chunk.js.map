{"version":3,"sources":["panes/fallback/Turtle.tsx","panes/fallback/Resources.tsx","components/styleguide/Toggle.tsx","panes/fallback/container.tsx"],"names":["Turtle","props","_React$useState","React","useState","_React$useState2","Object","slicedToArray","serialised","setSerialised","useEffect","$rdf","serialize","resource","doc","store","undefined","err","result","react_default","a","createElement","value","name","id","cols","rows","readOnly","Resources","statementsBySubject","statementsMatching","reduce","soFar","statement","subject","push","values","map","subjectStatements","subjectStatement","index","key","toString","ResourceLink","predicate","object","className","Toggle","inputProps","objectSpread","label","assign","aria-label","type","Container","cardView","setCardView","Toggle_Toggle","onChange","defaultChecked","Resources_Resources","Turtle_Turtle"],"mappings":"+IAQaA,EAA0B,SAACC,GAAU,IAAAC,EACZC,IAAMC,SAAiB,iBADXC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GACzCM,EADyCH,EAAA,GAC7BI,EAD6BJ,EAAA,GAahD,OAVAF,IAAMO,UAAU,WACbC,IAAaC,UAAUX,EAAMY,SAASC,MAAOb,EAAMc,WAAOC,EAAW,cAAe,SAACC,EAAYC,GAI9FT,EAHGQ,EAGW,kEAFAC,OAQlBC,EAAAC,EAAAC,cAAA,YACEC,MAAOd,EACPe,KAAK,cACLC,GAAG,cACHC,KAAM,GACNC,KAAM,GACNC,UAAQ,cCnBDC,EAA6B,SAAC3B,GACzC,IACM4B,EADa5B,EAAMc,MAAMe,mBAAmB,KAAM,KAAM,KAAM7B,EAAMY,SAASC,OAAO,GACnDiB,OACrC,SAACC,EAAOC,GACN,IAAMC,EAAUD,EAAUC,QAAQZ,MAGlC,OAFAU,EAAME,GAAWF,EAAME,IAAY,GACnCF,EAAME,GAASC,KAAKF,GACbD,GAET,IAGIN,EAAOpB,OAAO8B,OAAOP,GAAqBQ,IAAI,SAACC,GACnD,OAAOA,EAAkBD,IAAI,SAACE,EAAkBC,GAC9C,OACErB,EAAAC,EAAAC,cAAA,MAAIoB,IAAKF,EAAiBL,QAAUM,EAAME,YACxCvB,EAAAC,EAAAC,cAAA,UACc,IAAVmB,EACErB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAc9B,SAAU0B,EAAiBL,UACzC,MAGNf,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAc9B,SAAU0B,EAAiBK,aAE3CzB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAc9B,SAAU0B,EAAiBM,eAOnD,OACE1B,EAAAC,EAAAC,cAAA,OAAKyB,UAAU,QACb3B,EAAAC,EAAAC,cAAA,aAAOF,EAAAC,EAAAC,cAAA,aAAQK,eCjCRqB,EAA0B,SAAC9C,GACtC,IAAM+C,EAAU1C,OAAA2C,EAAA,EAAA3C,CAAA,GACXL,EADW,CAEdiD,WAAOlC,IAGT,OACEG,EAAAC,EAAAC,cAAA,SAAOyB,UAAU,UACf3B,EAAAC,EAAAC,cAAA,QAAAf,OAAA6C,OAAA,GAAWH,EAAX,CAAuBI,aAAYnD,EAAMiD,MAAOG,KAAK,cACrDlC,EAAAC,EAAAC,cAAA,QAAMyB,UAAU,2DCdf,IAAMQ,EAA2B,SAACrD,GAAU,IAAAC,EACjBC,IAAMC,UAAS,GADEC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAC1CqD,EAD0ClD,EAAA,GAChCmD,EADgCnD,EAAA,GAOjD,OACEc,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,sFACAF,EAAAC,EAAAC,cAAA,gDACAF,EAAAC,EAAAC,cAACoC,EAAD,CAAQC,SARO,WACjBF,GAAaD,IAOmBL,MAAM,YAAYS,eAAgBJ,IAC/DA,EACGpC,EAAAC,EAAAC,cAACuC,EAAD,CAAW/C,SAAUZ,EAAMY,SAAUE,MAAOd,EAAMc,QAClDI,EAAAC,EAAAC,cAACwC,EAAD,CAAQhD,SAAUZ,EAAMY,SAAUE,MAAOd,EAAMc","file":"static/js/3.97aa4e36.chunk.js","sourcesContent":["import React from 'react';\nimport $rdf, { IndexedFormula, NamedNode } from 'rdflib';\n\ninterface Props {\n  resource: NamedNode;\n  store: IndexedFormula;\n};\n\nexport const Turtle: React.FC<Props> = (props) => {\n  const [serialised, setSerialised] = React.useState<string>('Loadingâ€¦');\n\n  React.useEffect(() => {\n    ($rdf as any).serialize(props.resource.doc(), props.store, undefined, 'text/turtle', (err: Error, result: string) => {\n      if (!err) {\n        setSerialised(result);\n      } else {\n        setSerialised('Error loading the raw document, please try refreshing the page.');\n      }\n    });\n  });\n\n  return (\n    <textarea\n      value={serialised}\n      name=\"rawDocument\"\n      id=\"rawDocument\"\n      cols={30}\n      rows={10}\n      readOnly\n    />\n  );\n};\n","import React from 'react';\nimport { IndexedFormula, NamedNode, Statement } from 'rdflib';\nimport { ResourceLink } from '../../components/ResourceLink';\n\ninterface Props {\n  resource: NamedNode;\n  store: IndexedFormula;\n};\n\nexport const Resources: React.FC<Props> = (props) => {\n  const statements = props.store.statementsMatching(null, null, null, props.resource.doc(), false);\n  const statementsBySubject = statements.reduce(\n    (soFar, statement) => {\n      const subject = statement.subject.value;\n      soFar[subject] = soFar[subject] || [];\n      soFar[subject].push(statement);\n      return soFar;\n    },\n    {} as {[subject: string]: Statement[]},\n  );\n\n  const rows = Object.values(statementsBySubject).map((subjectStatements) => {\n    return subjectStatements.map((subjectStatement, index) => {\n      return (\n        <tr key={subjectStatement.subject + index.toString()}>\n          <td>\n            {(index === 0)\n              ? <ResourceLink resource={subjectStatement.subject as NamedNode}/>\n              : null\n            }\n          </td>\n          <td>\n            <ResourceLink resource={subjectStatement.predicate as NamedNode}/>\n          </td>\n          <td>\n            <ResourceLink resource={subjectStatement.object as NamedNode}/>\n          </td>\n        </tr>\n      );\n    });\n  });\n\n  return (\n    <div className=\"card\">\n      <table><tbody>{rows}</tbody></table>\n    </div>\n  );\n};\n","import React from 'react';\n\ninterface OwnProps {\n  label: string;\n};\n\ntype Props = Omit<React.HTMLAttributes<HTMLInputElement>, keyof OwnProps> & OwnProps;\n\n/**\n * @param props Attributes that are valid for `<input type=\"checkbox\">` are valid here too. Additionally, a `label` prop is required. This is currently only provided to screen readers, but will likely be shown in the interface later.\n */\nexport const Toggle: React.FC<Props> = (props) => {\n  const inputProps = {\n    ...props,\n    label: undefined,\n  };\n\n  return (\n    <label className=\"switch\">\n      <input {...inputProps} aria-label={props.label} type=\"checkbox\"/>\n      <span className=\"slider round\"/>\n    </label>\n  );\n}\n","import React from 'react';\nimport { PaneContainer } from '../../components/PaneLoader';\nimport { Turtle } from './Turtle';\nimport { Resources } from './Resources';\nimport { Toggle } from '../../components/styleguide/Toggle';\n\nexport const Container: PaneContainer = (props) => {\n  const [cardView, setCardView] = React.useState(true);\n\n  const toggleView = () => {\n    setCardView(!cardView);\n  }\n\n  return (\n    <section>\n      <p>Unfortunately we do not yet have a Pane to display this type of resource.</p>\n      <p>You can see the raw document below:</p>\n      <Toggle onChange={toggleView} label=\"Card view\" defaultChecked={cardView}/>\n      {cardView\n        ? <Resources resource={props.resource} store={props.store}/>\n        : <Turtle resource={props.resource} store={props.store}/>\n      }\n    </section>\n  );\n};\n"],"sourceRoot":""}